use super::prelude::*;

use dracula_schemas::tables::magics::dsl as magics_dsl;

pub fn magic(pg_uri: &str) -> (String, i64) {
    let conn = PgConnection::establish(pg_uri).unwrap();

    let magics_load = Instant::now();
    let magics = magics_dsl::magics
        .load::<magic>(&conn)
        .unwrap();
    trace!("magics: {:?}", magics_load.elapsed());

    let path = "/tmp/magics.parquet";

    let path_meta = <&str>::clone(&path);
    let vector_for_schema = &magics;
    let schema = vector_for_schema.as_slice().schema().unwrap();
    println!("{:?} schema", &schema);

    let file = std::fs::File::create(path).unwrap();
    let mut pfile = SerializedFileWriter::new(file, schema, props())
.unwrap();

    {
        let mut row_group = pfile.next_row_group().unwrap();
        (&magics[..]).write_to_row_group(&mut row_group).expect("can't 'write_to_row_group' ...");
        pfile.close_row_group(row_group).unwrap();
    }

     // let rows_number = *pfile.total_num_rows() as i64;
     pfile.close().unwrap();
     let reader = SerializedFileReader::try_from(path_meta).unwrap();
     let parquet_metadata = reader.metadata();
     let file_metadata = parquet_metadata.file_metadata();
     let rows_number = file_metadata.num_rows();
     (path.into(), rows_number)
}


pub struct magicTask {
}

impl DraculaTask for magicTask {
    fn run(&self, postgres_uri: &str) -> (String, i64) {
        magics(postgres_uri)
    }
}